package de.ostfalia.teamx.snakorino.controller;

import de.ostfalia.teamx.ApplicationConstants;
import de.ostfalia.teamx.controller.BaseController;
import de.ostfalia.teamx.controller.Scenes;
import de.ostfalia.teamx.snakorino.model.Config;
import de.ostfalia.teamx.snakorino.model.Direction;
import de.ostfalia.teamx.snakorino.model.Snake;
import de.ostfalia.teamx.snakorino.model.Vector2;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCode;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.util.Duration;

/**
 * @author Leonard Reidel
 * @author Benjamin Wulfert
 *
 * The GameCanvasController manages the state of the game canvas - it also contains the game-logic for realizing
 * the snake-game.
 */
public class GameController extends BaseController {

    // the configuration in order to setup a game
    // TODO: this needs to get connected with a SpielDefinition, i guess
    private Config config = new Config();

    private static final String[] FOODS_IMAGE = new String[]{
            "food/ic_orange.png",
            "food/ic_apple.png",
            "food/ic_cherry.png",
            "food/ic_berry.png",
            "food/ic_coconut_.png",
            "food/ic_peach.png",
            "food/ic_watermelon.png",
            "food/ic_orange.png",
            "food/ic_pomegranate.png"
    };

    // The GraphicsContext used to draw the background, the snake-shapes and the food / powerups
    private GraphicsContext gc;

    // the timeline which is (ab-)used to realize some kind of update-loop
    private Timeline timeline;

    // the amount of milliseconds each game-tick needs in order to update the games state
    public double TICK_TIME_AMOUNT = 130;

    // FOOD STUFF - Extract to class Food.java
    // The image of the current food
    private Image foodImage;
    private int foodX;
    private int foodY;
    // FOOD STUFF

    // States
    private boolean gameOver;
    private boolean paused;

    // SNAKE STUFF - REFACTOR TO THE SNAKE CLASS
    // related to one player
    private final Snake snake = new Snake();
    private Direction currentDirection = Direction.right; // Snake property
    // the score of the first player
    private int score = 0;
    // SNAKE STUFF

    @Override
    public void postInitialize() {
        super.postInitialize();

        // add the initial UI to the scene
        Group root = new Group();
        Canvas canvas = new Canvas(config.width, config.width);
        root.getChildren().add(canvas);
        Scene scene = new Scene(root);

        // display the UI within the scene, center the stage on the users system
        currentStage.setScene(scene);
        currentStage.centerOnScreen();

        gc = canvas.getGraphicsContext2D();

        // converted object to lambda using intellij's refactor suggestion
        // this lambda provides a players input
        scene.setOnKeyPressed(event -> {
            KeyCode code = event.getCode();

            if (code == KeyCode.RIGHT || code == KeyCode.D) {
                if (currentDirection != Direction.left) {
                    currentDirection = Direction.right;
                }
            } else if (code == KeyCode.LEFT || code == KeyCode.A) {
                if (currentDirection != Direction.right) {
                    currentDirection = Direction.left;
                }
            } else if (code == KeyCode.UP || code == KeyCode.W) {
                if (currentDirection != Direction.down) {
                    currentDirection = Direction.up;
                }
            } else if (code == KeyCode.DOWN || code == KeyCode.S) {
                if (currentDirection != Direction.up) {
                    currentDirection = Direction.down;
                }
            } else if (code == KeyCode.ESCAPE) {
                // primaryStage.close();
            } else if (code == KeyCode.SPACE) {
                // Pause-Mode - this shoudnt be available in regular multiplayer
                // toggle the paused state
                paused = !paused;

                if(paused) { timeline.stop();}
                else { timeline.play();}

            } else if(code == KeyCode.R){
                currentStage.close();
                showLayout(Scenes.VIEW_GAME_CANVAS, ApplicationConstants.TITLE_CURRENT_GAME);
            }

        });

        // initialize the food on the map
        generateFood();

        // The game animation happens because of the timeline
        // every change happens in a new keyFrame (update-loop)
        // and the keyframe is generated by run
        timeline = new Timeline(new KeyFrame(Duration.millis(TICK_TIME_AMOUNT), event -> run(gc)));
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }

    /**
     * The update-loop of the game.
     * Gets called every TICK_TIME_AMOUNT until someone wins or some other kind of rule is fulfilled.
     * @param gc
     */
    private void run(GraphicsContext gc) {
        if (gameOver) {
            gc.setFill(Color.RED);
            gc.setFont(new Font("Digital-7", 70));
            gc.fillText("Game Over", config.width / 3.5, config.width / 2);
            return;
        }

        // visualize the game with its players (the snakes), the food, the score, etc.
        drawBackground(gc);
        drawFood(gc);
        drawSnake(gc);
        drawScore();

        // ?
        for (int i = snake.body.size() - 1; i >= 1; i--) {
            snake.body.get(i).x = snake.body.get(i - 1).x;
            snake.body.get(i).y = snake.body.get(i - 1).y;
        }

        switch (currentDirection) {
            case right:
                snake.moveright();
                break;
            case left:
                snake.moveLeft();
                break;
            case up:
                snake.moveUp();
                break;
            case down:
                snake.moveDown();
                break;
        }

        checkGameOver();
        checkEatFood();
    }

    /**
     * Draw the checker-board pattern to / as the background of the game.
     * @param gc
     */
    private void drawBackground(GraphicsContext gc) {
        // for each row ...
        for (int i = 0; i < config.rows; i++) {
            // for each column
            for (int j = 0; j < config.columns; j++) {
                if ((i + j) % 2 == 0) {
                    // if i+j is even - draw a slightly brighter grey tone
                    gc.setFill(Color.web("161718"));
                } else {
                    // if i+j is odd - draw a slightly darker grey tone
                    gc.setFill(Color.web("34383B"));
                }
                // draw the rect
                gc.fillRect(i * config.square_size, j * config.square_size,
                        config.square_size, config.square_size);
            }
        }
    }

    /**
     * Generate the food for the players within the game map.
     * TODO - maybe we shouldnt generate food below a snake?
     */
    private void generateFood() {
        while (true) {
            foodX = (int) (Math.random() * config.rows);
            foodY = (int) (Math.random() * config.columns);

            Vector2 head = snake.body.get(0);
            if (head.getX() == foodX && head.getY() == foodY) { // food can appear below snake (snake shown above food)
                continue;
            }
            foodImage = new Image(FOODS_IMAGE[(int) (Math.random() * FOODS_IMAGE.length)]);
            break;
        }
    }

    /**
     * Draw the food, which has been generated bevor
     * @param gc
     */
    private void drawFood(GraphicsContext gc) {
        gc.drawImage(foodImage, foodX * config.square_size, foodY * config.square_size, config.square_size,
                config.square_size);
    }

    /**
     * Draw the snake and their body-parts based on their position
     * @param gc
     */
    private void drawSnake(GraphicsContext gc) {
        gc.setFill(Color.web("4674E9"));
        gc.fillRoundRect(snake.head.getX() * config.square_size, snake.head.getY() * config.square_size,
                config.square_size - 1, config.square_size - 1, 35, 35);

        for (int i = 1; i < snake.body.size(); i++) {
            gc.fillRoundRect(snake.body.get(i).getX() * config.square_size,
                    snake.body.get(i).getY() * config.square_size, config.square_size - 1,
                    config.square_size - 1, 20, 20);
        }
    }

    /**
     * Check if the game is finished.
     */
    public void checkGameOver() {
        if (snake.head.x < 0 || snake.head.y < 0 ||
                snake.head.x * config.square_size >= config.width ||
                snake.head.y * config.square_size >= config.width) {
            gameOver = true;
        }

        //destroy itself
        for (int i = 1; i < snake.body.size(); i++) {
            if (snake.head.x == snake.body.get(i).getX() && snake.head.getY() == snake.body.get(i).getY()) {
                gameOver = true;
                break;
            }
        }
    }

    private void checkEatFood() {
        if (snake.head.getX() == foodX && snake.head.getY() == foodY) {
            snake.body.add(new Vector2(-1, -1));
            generateFood();
            score += 5;
        }
    }

    private void drawScore() {
        gc.setFill(Color.WHITE);
        gc.setFont(new Font("", 35)); // Find funny font
        gc.fillText("Score: " + score, 10, 35);
    }


}
